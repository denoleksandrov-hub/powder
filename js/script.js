
// ===== 1. –î–ê–ù–Ü (—Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó) =====
const products = [
    // üå∑ –ë—É–∫–µ—Ç–∏
    ...Array.from({ length: 10 }, (_, i) => ({
        id: i + 1,
        name: `–ë—É–∫–µ—Ç ${i + 1}`,
        price: Math.floor(300 + Math.random() * 700),
        category: 'bouquets',
        description: '–ß—É–¥–æ–≤–∏–π –∫–≤—ñ—Ç–∫–æ–≤–∏–π –±—É–∫–µ—Ç –¥–ª—è –æ—Å–æ–±–ª–∏–≤–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤.',
        image: `img/bouquets/b${i + 1}.jpg`
    })),

    // üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏
    ...Array.from({ length: 10 }, (_, i) => ({
        id: 100 + i + 1,
        name: `–ü–æ–¥–∞—Ä—É–Ω–æ–∫ ${i + 1}`,
        price: Math.floor(200 + Math.random() * 500),
        category: 'gifts',
        description: '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–ª—è –±–ª–∏–∑—å–∫–∏—Ö.',
        image: `img/gifts/g${i + 1}.jpg`
    })),

    // üåπ –ö–≤—ñ—Ç–∏ –ø–æ—à—Ç—É—á–Ω–æ
    ...Array.from({ length: 10 }, (_, i) => ({
        id: 200 + i + 1,
        name: `–ö–≤—ñ—Ç–∫–∞ ${i + 1}`,
        price: Math.floor(50 + Math.random() * 200),
        category: 'single',
        description: '–û–∫—Ä–µ–º–∞ –∫–≤—ñ—Ç–∫–∞ –∑ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º —à–∞—Ä–º–æ–º.',
        image: `img/single/s${i + 1}.jpg`
    })),

    // üíå –õ–∏—Å—Ç—ñ–≤–∫–∏
    ...Array.from({ length: 10 }, (_, i) => ({
        id: 300 + i + 1,
        name: `–õ–∏—Å—Ç—ñ–≤–∫–∞ ${i + 1}`,
        price: Math.floor(30 + Math.random() * 100),
        category: 'cards',
        description: '–ì–∞—Ä–Ω–∞ –ª–∏—Å—Ç—ñ–≤–∫–∞ –¥–æ –≤–∞—à–æ–≥–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∞.',
        image: `img/cards/c${i + 1}.jpg`
    })),

    // üç´ –¶—É–∫–µ—Ä–∫–∏
    ...Array.from({ length: 10 }, (_, i) => ({
        id: 400 + i + 1,
        name: `–¶—É–∫–µ—Ä–∫–∏ ${i + 1}`,
        price: Math.floor(80 + Math.random() * 300),
        category: 'sweets',
        description: '–°–æ–ª–æ–¥–∫–∏–π —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é.',
        image: `img/sweets/sw${i + 1}.jpg`
    }))
];

// ===== 2. –õ–û–ö–ê–õ–¨–ù–ï –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø =====
let cart = JSON.parse(localStorage.getItem('florisCart')) || [];
const saveCart = () => localStorage.setItem('florisCart', JSON.stringify(cart));

// ===== 3. –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø =====
const productsContainer = document.getElementById('products-container');
const cartItemsContainer = document.getElementById('cart-items');
const totalAmountElement = document.getElementById('total-amount');
const cartCountElement = document.getElementById('cart-count');

function renderProducts(filter = 'all') {
    productsContainer.innerHTML = '';
    const filtered = products.filter(p => filter === 'all' || p.category === filter);

    filtered.forEach(p => {
        const isInCart = cart.find(i => i.id === p.id);
        const div = document.createElement('div');
        div.className = 'product-card';
        div.innerHTML = `
            <img src="${p.image}" alt="${p.name}">
            <h3>${p.name}</h3>
            <p>${p.description}</p>
            <p class="price">${p.price} –≥—Ä–Ω</p>
            ${isInCart
                ? `<button onclick="removeFromCart(${p.id})" class="remove-btn">–í–∏–¥–∞–ª–∏—Ç–∏</button>`
                : `<button onclick="addToCart(${p.id})">–î–æ–¥–∞—Ç–∏</button>`}
        `;
        productsContainer.appendChild(div);
    });
}

// ===== 4. –ö–û–®–ò–ö =====
function updateCart() {
    cartItemsContainer.innerHTML = '';
    if (!cart.length) {
        cartItemsContainer.innerHTML = '<p id="empty-cart-message">–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.</p>';
    } else {
        cart.forEach(item => {
            const product = products.find(p => p.id === item.id);
            const div = document.createElement('div');
            div.className = 'cart-item';
            div.innerHTML = `
                <span>${product.name}</span>
                <div>
                    <button onclick="changeQty(${product.id}, -1)">-</button>
                    <span>${item.quantity}</span>
                    <button onclick="changeQty(${product.id}, 1)">+</button>
                    <span>${(product.price * item.quantity).toFixed(2)} –≥—Ä–Ω</span>
                    <button class="remove-btn" onclick="removeFromCart(${product.id})">X</button>
                </div>
            `;
            cartItemsContainer.appendChild(div);
        });
    }

    const total = cart.reduce((s, i) => s + products.find(p => p.id === i.id).price * i.quantity, 0);
    totalAmountElement.textContent = total.toFixed(2);
    cartCountElement.textContent = cart.reduce((s, i) => s + i.quantity, 0);
    saveCart();
    renderProducts(document.querySelector('.filter-btn.active').dataset.category);
}

function addToCart(id) {
    const existing = cart.find(i => i.id === id);
    if (existing) existing.quantity++;
    else cart.push({ id, quantity: 1 });
    updateCart();
}
function changeQty(id, delta) {
    const item = cart.find(i => i.id === id);
    if (!item) return;
    item.quantity += delta;
    if (item.quantity <= 0) cart = cart.filter(i => i.id !== id);
    updateCart();
}
function removeFromCart(id) {
    cart = cart.filter(i => i.id !== id);
    updateCart();
}

// ===== 5. –ù–ê–í–Ü–ì–ê–¶–Ü–Ø –ú–Ü–ñ –°–¢–û–†–Ü–ù–ö–ê–ú–ò =====
document.querySelectorAll('.nav-link').forEach(link => {
    link.addEventListener('click', e => {
        e.preventDefault();

        const target = link.dataset.section;

        // —Ö–æ–≤–∞—î–º–æ –≤—Å—ñ —Å–µ–∫—Ü—ñ—ó
        document.querySelectorAll('main section').forEach(sec => {
            sec.classList.add('hidden-section');
            sec.classList.remove('active-section');
        });

        // –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É
        const targetSection = document.getElementById(target);
        if (targetSection) {
            targetSection.classList.remove('hidden-section');
            targetSection.classList.add('active-section');
        }

        // —è–∫—â–æ —Ü–µ –∫–æ—à–∏–∫ ‚Äî –æ–Ω–æ–≤–∏—Ç–∏
        if (target === 'cart' && typeof updateCart === 'function') {
            updateCart();
        }
    });
});

// ===== 6. –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø =====
document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        document.querySelector('.filter-btn.active').classList.remove('active');
        btn.classList.add('active');
        renderProducts(btn.dataset.category);
    });
});

// ===== 7. –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø =====
renderProducts();
updateCart();
